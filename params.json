{"name":"Angles","tagline":"An angular.js wrapper for Chart.js","body":"Angles.js\r\n=========\r\n\r\nAn angular.js wrapper for the Chart.js library.\r\n\r\n[Chart.js Documentation](http://www.chartjs.org/docs/)\r\n\r\nNew Update of ChartJS (Beta) allow more interaction with graph ( tooltips and png/jpg export of graphs)\r\n\r\n[ChartJS](http://www.chartjs.org/)\r\n\r\nBasic Usage\r\n-----------\r\n\r\nTo Use, make sure to include the following .js files above your app:\r\n```html\r\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/angular.js/1.2.10/angular.min.js\"></script>\r\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/Chart.js/1.0.1-beta.2/Chart.min.js\"></script>\r\n<script src=\"angles.js\"></script>\r\n```\r\n\r\nNext, make sure to add **\"angles\"** to your Angular app requirements:\r\n\r\n```javascript\r\nvar app = angular.module(\"anglesExample\", [\"angles\"]);\r\n```\r\n\r\nCharts are added using a canvas element with the following syntax, which corresponds to Chart.js. The data and options attributes refer to ng-models in the controller scope. You can name these whatever you want:\r\n\r\n```html\r\n<canvas chart type=\"Line\" options=\"options\" data=\"chart\" width=\"500\" height=\"300\"></canvas>\r\n```\r\n\r\nCharts can also be added with shorter, aliased types\r\n\r\n```html\r\n<canvas barchart options=\"options\" data=\"chart\" width=\"500\" height=\"300\"></canvas>\r\n```\r\n\r\nIn your controller, make sure you provide the appropriate data and options per Chart.js documentation:\r\n\r\nyou can add responsive attribute to enable responsiveness of canvas\r\n\r\n```html\r\n<canvas barchart responsive=true options=\"options\" data=\"chart\"></canvas>\r\n```\r\n\r\nthe legend attribute auto generate a legend after canvas container \r\n\r\n```html\r\n<canvas barchart legend=true options=\"options\" data=\"chart\"></canvas>\r\n```\r\n\r\nThe template for this legend is a legendTemplate in the chart options\r\n\r\n```javascript\r\n$scope.chart = {\r\n    labels : [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"],\r\n    datasets : [\r\n        {\r\n        \tfillColor : \"rgba(151,187,205,0)\",\r\n        \tstrokeColor : \"#e67e22\",\r\n        \tpointColor : \"rgba(151,187,205,0)\",\r\n        \tpointStrokeColor : \"#e67e22\",\r\n        \tdata : [4, 3, 5, 4, 6]\r\n        },\r\n        {\r\n        \tfillColor : \"rgba(151,187,205,0)\",\r\n        \tstrokeColor : \"#f1c40f\",\r\n        \tpointColor : \"rgba(151,187,205,0)\",\r\n        \tpointStrokeColor : \"#f1c40f\",\r\n        \tdata : [8, 3, 2, 5, 4]\r\n        }\r\n    ], \r\n};\r\n```\r\n\r\nThat's it. You can change the values of the chart just as you would with any other angular model.\r\n\r\nDirectives\r\n----------\r\n\r\n### linechart\r\n\r\nFor Chart.js Line Charts\r\n\r\n```html\r\n<canvas linechart options=\"options\" data=\"chart\" width=\"300\" height=\"300\"></canvas>\r\nOR\r\n<canvas chart type=\"Line\" options=\"options\" data=\"chart\" width=\"300\" height=\"300\"></canvas>\r\n```\r\n\r\n### barchart\r\n\r\nFor Chart.js Bar Charts\r\n\r\n```html\r\n<canvas barchart options=\"options\" data=\"chart\" width=\"300\" height=\"300\"></canvas>\r\nOR\r\n<canvas chart type=\"Bar\" options=\"options\" data=\"chart\" width=\"300\" height=\"300\"></canvas>\r\n```\r\n\r\n### radarchart\r\n\r\nFor Chart.js Radar Charts\r\n\r\n```html\r\n<canvas radarchart options=\"options\" data=\"chart\" width=\"300\" height=\"300\"></canvas>\r\nOR\r\n<canvas chart type=\"Radar\" options=\"options\" data=\"chart\" width=\"300\" height=\"300\"></canvas>\r\n```\r\n\r\n### polarchart\r\n\r\nFor Chart.js Polar Charts\r\n\r\n```html\r\n<canvas polarchart options=\"options\" data=\"chart\" width=\"300\" height=\"300\"></canvas>\r\nOR\r\n<canvas chart type=\"PolarArea\" options=\"options\" data=\"chart\" width=\"300\" height=\"300\"></canvas>\r\n```\r\n\r\n### piechart\r\n\r\nFor Chart.js Pie Charts\r\n\r\n```html\r\n<canvas piechart options=\"options\" data=\"chart\" width=\"300\" height=\"300\"></canvas>\r\nOR\r\n<canvas chart type=\"Pie\" options=\"options\" data=\"chart\" width=\"300\" height=\"300\"></canvas>\r\n```\r\n\r\n### doughnutchart\r\n\r\nFor Chart.js Doughnut Charts\r\n\r\n```html\r\n<canvas doughnutchart options=\"options\" data=\"chart\" width=\"300\" height=\"300\"></canvas>\r\nOR\r\n<canvas chart type=\"Doughnut\" options=\"options\" data=\"chart\" width=\"300\" height=\"300\"></canvas>\r\n```\r\n\r\nOptions and Data\r\n----------------\r\n\r\nYou can provide options and data to all charts via the options and data attributes on the canvas elements.\r\n\r\n```html\r\n<body ng-app=\"app\">\r\n\r\n    <div ng-controller=\"MainCtrl\">\r\n    \r\n        <canvas donutchart options=\"myChartOptions\" data=\"myChartData\" width=\"300\" height=\"300\"></canvas>\r\n    \r\n    </div>\r\n\r\n\r\n</body>\r\n```\r\n\r\n```javascript\r\n'use strict';\r\n\r\nangular.module('app', ['angles']).controller('MainCtrl', function( $scope ) {\r\n\r\n    $scope.myChartData = [\r\n    \t{\r\n    \t\tvalue: 30,\r\n    \t\tcolor:\"#F7464A\"\r\n    \t},\r\n    \t{\r\n    \t\tvalue : 50,\r\n    \t\tcolor : \"#E2EAE9\"\r\n    \t},\r\n    \t{\r\n    \t\tvalue : 100,\r\n    \t\tcolor : \"#D4CCC5\"\r\n    \t},\r\n    \t{\r\n    \t\tvalue : 40,\r\n    \t\tcolor : \"#949FB1\"\r\n    \t},\r\n    \t{\r\n    \t\tvalue : 120,\r\n    \t\tcolor : \"#4D5360\"\r\n    \t}\r\n    ];\r\n  \r\n    //Globals\r\n    $scope.myChartOptions = {\r\n        // Boolean - Whether to animate the chart\r\n        animation: true,\r\n    \r\n        // Number - Number of animation steps\r\n        animationSteps: 60,\r\n    \r\n        // String - Animation easing effect\r\n        animationEasing: \"easeOutQuart\",\r\n    \r\n        // Boolean - If we should show the scale at all\r\n        showScale: true,\r\n    \r\n        // Boolean - If we want to override with a hard coded scale\r\n        scaleOverride: false,\r\n    \r\n        // ** Required if scaleOverride is true **\r\n        // Number - The number of steps in a hard coded scale\r\n        scaleSteps: null,\r\n        // Number - The value jump in the hard coded scale\r\n        scaleStepWidth: null,\r\n        // Number - The scale starting value\r\n        scaleStartValue: null,\r\n    \r\n        // String - Colour of the scale line\r\n        scaleLineColor: \"rgba(0,0,0,.1)\",\r\n    \r\n        // Number - Pixel width of the scale line\r\n        scaleLineWidth: 1,\r\n    \r\n        // Boolean - Whether to show labels on the scale\r\n        scaleShowLabels: true,\r\n    \r\n        // Interpolated JS string - can access value\r\n        scaleLabel: \"<%=value%>\",\r\n    \r\n        // Boolean - Whether the scale should stick to integers, not floats even if drawing space is there\r\n        scaleIntegersOnly: true,\r\n    \r\n        // Boolean - Whether the scale should start at zero, or an order of magnitude down from the lowest value\r\n        scaleBeginAtZero: false,\r\n    \r\n        // String - Scale label font declaration for the scale label\r\n        scaleFontFamily: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\r\n    \r\n        // Number - Scale label font size in pixels\r\n        scaleFontSize: 12,\r\n    \r\n        // String - Scale label font weight style\r\n        scaleFontStyle: \"normal\",\r\n    \r\n        // String - Scale label font colour\r\n        scaleFontColor: \"#666\",\r\n    \r\n        // Boolean - whether or not the chart should be responsive and resize when the browser does.\r\n        responsive: false,\r\n    \r\n        // Boolean - Determines whether to draw tooltips on the canvas or not\r\n        showTooltips: true,\r\n    \r\n        // Array - Array of string names to attach tooltip events\r\n        tooltipEvents: [\"mousemove\", \"touchstart\", \"touchmove\"],\r\n    \r\n        // String - Tooltip background colour\r\n        tooltipFillColor: \"rgba(0,0,0,0.8)\",\r\n    \r\n        // String - Tooltip label font declaration for the scale label\r\n        tooltipFontFamily: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\r\n    \r\n        // Number - Tooltip label font size in pixels\r\n        tooltipFontSize: 14,\r\n    \r\n        // String - Tooltip font weight style\r\n        tooltipFontStyle: \"normal\",\r\n    \r\n        // String - Tooltip label font colour\r\n        tooltipFontColor: \"#fff\",\r\n    \r\n        // String - Tooltip title font declaration for the scale label\r\n        tooltipTitleFontFamily: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\r\n    \r\n        // Number - Tooltip title font size in pixels\r\n        tooltipTitleFontSize: 14,\r\n    \r\n        // String - Tooltip title font weight style\r\n        tooltipTitleFontStyle: \"bold\",\r\n    \r\n        // String - Tooltip title font colour\r\n        tooltipTitleFontColor: \"#fff\",\r\n    \r\n        // Number - pixel width of padding around tooltip text\r\n        tooltipYPadding: 6,\r\n    \r\n        // Number - pixel width of padding around tooltip text\r\n        tooltipXPadding: 6,\r\n    \r\n        // Number - Size of the caret on the tooltip\r\n        tooltipCaretSize: 8,\r\n    \r\n        // Number - Pixel radius of the tooltip border\r\n        tooltipCornerRadius: 6,\r\n    \r\n        // Number - Pixel offset from point x to tooltip edge\r\n        tooltipXOffset: 10,\r\n    \r\n        // String - Template string for single tooltips\r\n        tooltipTemplate: \"<%if (label){%><%=label%>: <%}%><%= value %>\",\r\n    \r\n        // String - Template string for single tooltips\r\n        multiTooltipTemplate: \"<%= value %>\",\r\n    \r\n        // Function - Will fire on animation progression.\r\n        onAnimationProgress: function(){},\r\n    \r\n        // Function - Will fire on animation completion.\r\n        onAnimationComplete: function(){}\r\n    };\r\n\r\n};\r\n\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}